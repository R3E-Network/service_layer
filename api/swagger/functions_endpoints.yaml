openapi: 3.0.0
info:
  title: Service Layer Functions API
  description: API documentation for the Functions service endpoints
  version: 1.0.0
  contact:
    name: R3E Network
    email: support@r3e-network.io

servers:
  - url: https://api.service-layer.io/v1
    description: Production server
  - url: https://staging-api.service-layer.io/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    FunctionCreateRequest:
      type: object
      required:
        - name
        - source_code
      properties:
        name:
          type: string
          description: Function name
          example: "price_aggregator"
        description:
          type: string
          description: Function description
          example: "Aggregates prices from multiple sources"
        source_code:
          type: string
          description: JavaScript source code
          example: "function main(params) { return { result: params.a + params.b }; }"
        secrets_access:
          type: array
          description: List of secret names this function can access
          items:
            type: string
          example: ["api_key", "private_key"]
        trigger_type:
          type: string
          enum: [manual, scheduled, event]
          description: How the function is triggered
          example: "manual"
        trigger_config:
          type: object
          description: Configuration for the function trigger
          example: {"schedule": "0 */3 * * *", "retries": 3}

    FunctionUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Function name
        description:
          type: string
          description: Function description
        source_code:
          type: string
          description: JavaScript source code
        secrets_access:
          type: array
          description: List of secret names this function can access
          items:
            type: string
        trigger_type:
          type: string
          enum: [manual, scheduled, event]
          description: How the function is triggered
        trigger_config:
          type: object
          description: Configuration for the function trigger

    ExecuteFunctionRequest:
      type: object
      required:
        - params
      properties:
        params:
          type: object
          description: Parameters to pass to the function
          example: {"a": 5, "b": 10, "operation": "add"}

    Function:
      type: object
      properties:
        id:
          type: integer
          description: Function ID
          example: 42
        user_id:
          type: integer
          description: User ID who owns the function
          example: 15
        name:
          type: string
          description: Function name
          example: "price_aggregator"
        description:
          type: string
          description: Function description
          example: "Aggregates prices from multiple sources"
        source_code:
          type: string
          description: JavaScript source code
          example: "function main(params) { return { result: params.a + params.b }; }"
        secrets_access:
          type: array
          description: List of secret names this function can access
          items:
            type: string
          example: ["api_key", "private_key"]
        trigger_type:
          type: string
          enum: [manual, scheduled, event]
          description: How the function is triggered
          example: "manual"
        trigger_config:
          type: object
          description: Configuration for the function trigger
          example: {"schedule": "0 */3 * * *", "retries": 3}
        created_at:
          type: string
          format: date-time
          description: Function creation time
        updated_at:
          type: string
          format: date-time
          description: Function last update time

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Operation success status
        error:
          type: string
          description: Error message
          example: "Function execution failed: Timeout exceeded"
        code:
          type: string
          description: Error code
          example: "EXECUTION_TIMEOUT"

paths:
  /functions:
    get:
      summary: List all functions
      description: Returns a list of all functions owned by the authenticated user
      operationId: listFunctions
      tags:
        - Functions
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: Number of records to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Function'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new function
      description: Creates a new JavaScript function
      operationId: createFunction
      tags:
        - Functions
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionCreateRequest'
      responses:
        '201':
          description: Function created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Function'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/{id}:
    get:
      summary: Get function details
      description: Returns details of a specific function
      operationId: getFunction
      tags:
        - Functions
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Function ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Function'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Function not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a function
      description: Updates an existing function
      operationId: updateFunction
      tags:
        - Functions
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Function ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionUpdateRequest'
      responses:
        '200':
          description: Function updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Function'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Function not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a function
      description: Deletes an existing function
      operationId: deleteFunction
      tags:
        - Functions
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Function ID
          schema:
            type: integer
      responses:
        '200':
          description: Function deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Function deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Function not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/{id}/execute:
    post:
      summary: Execute a function
      description: Executes a function with the provided parameters
      operationId: executeFunction
      tags:
        - Functions
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Function ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteFunctionRequest'
      responses:
        '200':
          description: Function executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    description: Function execution result
                    example: {"result": 15, "duration": 45}
        '400':
          description: Invalid request or function execution error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Function not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: Function execution timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /functions/{id}/logs:
    get:
      summary: Get function execution logs
      description: Returns logs of previous function executions
      operationId: getFunctionLogs
      tags:
        - Functions
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Function ID
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of records to skip
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: start_time
          in: query
          description: Start time for logs (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: End time for logs (ISO 8601 format)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Log entry ID
                        function_id:
                          type: integer
                          description: Function ID
                        execution_time:
                          type: string
                          format: date-time
                          description: When the function was executed
                        duration_ms:
                          type: integer
                          description: Execution duration in milliseconds
                        status:
                          type: string
                          enum: [success, error, timeout]
                          description: Execution status
                        params:
                          type: object
                          description: Parameters passed to the function
                        result:
                          type: object
                          description: Function result
                        error:
                          type: string
                          description: Error message if execution failed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Function not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'