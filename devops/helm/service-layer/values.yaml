# Default values for service-layer
# This is a YAML-formatted file.

replicaCount: 3

image:
  repository: ghcr.io/r3e-network/service_layer
  tag: latest
  pullPolicy: Always
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/metrics"
  prometheus.io/port: "8080"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
  hosts:
    - host: api.service-layer.io
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: service-layer-tls
      hosts:
        - api.service-layer.io

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe:
  httpGet:
    path: /health/liveness
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 20

readinessProbe:
  httpGet:
    path: /health/readiness
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 10

persistence:
  enabled: true
  size: 10Gi
  storageClass: standard

config:
  environment: production
  server:
    port: 8080
    read_timeout: 30
    write_timeout: 30
    idle_timeout: 60
    max_header_bytes: 1048576
  database:
    host: ${DATABASE_HOST}
    port: 5432
    user: ${DATABASE_USER}
    name: service_layer
    ssl_mode: disable
    max_open_conns: 25
    max_idle_conns: 25
    conn_max_lifetime: 300
  auth:
    jwt_secret: ${AUTH_JWT_SECRET}
    token_expiry: 3600
    refresh_token_expiry: 86400
  neo:
    urls:
      - http://neo-node:10333
    wallet_path: /app/data/wallet.json
  tee:
    provider: azure
    memory_limit: 128
    timeout_sec: 5
    attestation:
      url: https://attest.azure.net
      policy: policyTEE
  security:
    encryption_key: ${SECURITY_ENCRYPTION_KEY}
    secrets_ttl: 86400
  logging:
    level: info
    format: json
    output: stdout

secrets:
  db_password: postgres  # Override this in production
  jwt_secret: change-me-in-production  # Override this in production
  encryption_key: change-me-in-production  # Override this in production

# Environment-specific configurations
environments:
  development:
    replicaCount: 1
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 256Mi
    autoscaling:
      enabled: false
    ingress:
      enabled: false
    config:
      environment: development
      logging:
        level: debug
      
  staging:
    replicaCount: 2
    config:
      environment: staging
      logging:
        level: debug
    ingress:
      hosts:
        - host: staging-api.service-layer.io
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: staging-service-layer-tls
          hosts:
            - staging-api.service-layer.io

  production:
    replicaCount: 3
    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 1
        memory: 1Gi
    autoscaling:
      minReplicas: 3
      maxReplicas: 15
    config:
      logging:
        level: info

# Dependencies configuration
postgresql:
  enabled: true
  auth:
    username: postgres
    password: postgres
    database: service_layer
  primary:
    persistence:
      size: 10Gi

prometheus:
  enabled: true
  alertmanager:
    enabled: true
  nodeExporter:
    enabled: true
  pushgateway:
    enabled: false
  server:
    persistentVolume:
      size: 8Gi

grafana:
  enabled: true
  adminPassword: admin  # Override this in production
  persistence:
    enabled: true
    size: 5Gi
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: default
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default 