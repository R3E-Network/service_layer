#!/bin/bash

# Vulnerability Scanning Script for Neo N3 Service Layer
# This script performs dependency vulnerability scanning using multiple tools

set -e

echo "Starting dependency vulnerability scanning..."

# Create output directory
OUTPUT_DIR="./security_reports"
mkdir -p "$OUTPUT_DIR"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Install required tools if not already installed
install_tools() {
  echo "Checking and installing required tools..."
  
  # Check and install govulncheck
  if ! command_exists govulncheck; then
    echo "Installing govulncheck..."
    go install golang.org/x/vuln/cmd/govulncheck@latest
  fi
  
  # Check and install nancy
  if ! command_exists nancy; then
    echo "Installing nancy..."
    go install github.com/sonatype-nexus-community/nancy@latest
  fi
  
  # Check and install OSV Scanner
  if ! command_exists osv-scanner; then
    echo "Installing OSV Scanner..."
    go install github.com/google/osv-scanner/cmd/osv-scanner@latest
  fi
}

# Run govulncheck for Go vulnerabilities
run_govulncheck() {
  echo "Running govulncheck..."
  GOVULN_OUTPUT="$OUTPUT_DIR/govulncheck_${TIMESTAMP}.json"
  govulncheck -json ./... > "$GOVULN_OUTPUT" || true
  
  # Create a summary of the findings
  echo "Creating govulncheck summary..."
  GOVULN_SUMMARY="$OUTPUT_DIR/govulncheck_summary_${TIMESTAMP}.txt"
  echo "GovulnCheck Summary - $(date)" > "$GOVULN_SUMMARY"
  echo "=========================" >> "$GOVULN_SUMMARY"
  
  VULN_COUNT=$(jq '.vulns | length' "$GOVULN_OUTPUT")
  echo "Found $VULN_COUNT vulnerabilities" >> "$GOVULN_SUMMARY"
  
  if [ "$VULN_COUNT" -gt 0 ]; then
    jq -r '.vulns[] | "- " + .pkg + ": " + .id + " - " + .details | .aliases[0] | "\n  Severity: " + (if .osv.severity != null then .osv.severity[0].type + " " + .osv.severity[0].score else "Unknown" end) + "\n  References: " + (.osv.references[0].url // "None")' "$GOVULN_OUTPUT" >> "$GOVULN_SUMMARY"
  fi
  
  echo "GovulnCheck scan completed. Results saved to $GOVULN_OUTPUT and summary to $GOVULN_SUMMARY"
}

# Run nancy for dependency vulnerability scanning
run_nancy() {
  echo "Running nancy..."
  NANCY_OUTPUT="$OUTPUT_DIR/nancy_${TIMESTAMP}.json"
  go list -json -deps ./... | nancy sleuth --output json > "$NANCY_OUTPUT" || true
  
  # Create a summary of the findings
  echo "Creating nancy summary..."
  NANCY_SUMMARY="$OUTPUT_DIR/nancy_summary_${TIMESTAMP}.txt"
  echo "Nancy Scan Summary - $(date)" > "$NANCY_SUMMARY"
  echo "=========================" >> "$NANCY_SUMMARY"
  
  VULN_COUNT=$(jq '.vulnerable | length' "$NANCY_OUTPUT")
  echo "Found $VULN_COUNT vulnerable dependencies" >> "$NANCY_SUMMARY"
  
  if [ "$VULN_COUNT" -gt 0 ]; then
    jq -r '.vulnerable[] | "- " + .coordinates + ":\n  " + (.vulnerabilities | map("  * " + .id + ": " + .title + " (CVSS: " + (.cvssScore | tostring) + ")") | join("\n  "))' "$NANCY_OUTPUT" >> "$NANCY_SUMMARY"
  fi
  
  echo "Nancy scan completed. Results saved to $NANCY_OUTPUT and summary to $NANCY_SUMMARY"
}

# Run OSV Scanner for broader vulnerability scanning
run_osv_scanner() {
  echo "Running OSV Scanner..."
  OSV_OUTPUT="$OUTPUT_DIR/osv_${TIMESTAMP}.json"
  osv-scanner -json ./... > "$OSV_OUTPUT" || true
  
  # Create a summary of the findings
  echo "Creating OSV Scanner summary..."
  OSV_SUMMARY="$OUTPUT_DIR/osv_summary_${TIMESTAMP}.txt"
  echo "OSV Scanner Summary - $(date)" > "$OSV_SUMMARY"
  echo "=========================" >> "$OSV_SUMMARY"
  
  VULN_COUNT=$(jq '.results | map(.packages | map(.vulnerabilities) | flatten) | flatten | length' "$OSV_OUTPUT")
  echo "Found $VULN_COUNT vulnerabilities" >> "$OSV_SUMMARY"
  
  if [ "$VULN_COUNT" -gt 0 ]; then
    jq -r '.results[] | .packages[] | select(.vulnerabilities != null) | "- " + .package.name + ":\n" + (.vulnerabilities | map("  * " + .id + ": " + .summary + "\n    Severity: " + (.severity // "Unknown") + "\n    Details: " + .details[0:100] + "...") | join("\n"))' "$OSV_OUTPUT" >> "$OSV_SUMMARY"
  fi
  
  echo "OSV Scanner completed. Results saved to $OSV_OUTPUT and summary to $OSV_SUMMARY"
}

# Generate a comprehensive HTML report
generate_report() {
  echo "Generating comprehensive HTML report..."
  REPORT_HTML="$OUTPUT_DIR/vulnerability_report_${TIMESTAMP}.html"
  
  cat > "$REPORT_HTML" << EOF
<!DOCTYPE html>
<html>
<head>
  <title>Neo N3 Service Layer - Vulnerability Scan Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1, h2, h3 { color: #333366; }
    .summary { background-color: #f8f8f8; padding: 15px; border-radius: 5px; }
    .critical { color: #cc0000; }
    .high { color: #ff6600; }
    .medium { color: #ffcc00; }
    .low { color: #00cc00; }
    table { border-collapse: collapse; width: 100%; margin-top: 20px; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    tr:nth-child(even) { background-color: #f9f9f9; }
  </style>
</head>
<body>
  <h1>Neo N3 Service Layer - Vulnerability Scan Report</h1>
  <p>Generated on: $(date)</p>
  
  <div class="summary">
    <h2>Executive Summary</h2>
    <p>This report contains the results of dependency vulnerability scanning performed on the Neo N3 Service Layer codebase.</p>
    <p>Tools used:</p>
    <ul>
      <li>govulncheck - for Go standard library and packages</li>
      <li>nancy - for dependency scanning</li>
      <li>OSV Scanner - for broader ecosystem vulnerabilities</li>
    </ul>
  </div>
  
  <h2>Vulnerability Summary</h2>
  <table>
    <tr>
      <th>Tool</th>
      <th>Vulnerabilities Found</th>
      <th>Critical</th>
      <th>High</th>
      <th>Medium</th>
      <th>Low</th>
    </tr>
    <tr>
      <td>govulncheck</td>
      <td id="govuln-total">$(jq '.vulns | length' "$GOVULN_OUTPUT")</td>
      <td id="govuln-critical">$(jq '.vulns[] | select(.osv.severity != null and .osv.severity[0].type == "CVSS_V3" and (.osv.severity[0].score | tonumber) >= 9.0) | .id' "$GOVULN_OUTPUT" | wc -l | tr -d ' ')</td>
      <td id="govuln-high">$(jq '.vulns[] | select(.osv.severity != null and .osv.severity[0].type == "CVSS_V3" and (.osv.severity[0].score | tonumber) >= 7.0 and (.osv.severity[0].score | tonumber) < 9.0) | .id' "$GOVULN_OUTPUT" | wc -l | tr -d ' ')</td>
      <td id="govuln-medium">$(jq '.vulns[] | select(.osv.severity != null and .osv.severity[0].type == "CVSS_V3" and (.osv.severity[0].score | tonumber) >= 4.0 and (.osv.severity[0].score | tonumber) < 7.0) | .id' "$GOVULN_OUTPUT" | wc -l | tr -d ' ')</td>
      <td id="govuln-low">$(jq '.vulns[] | select(.osv.severity != null and .osv.severity[0].type == "CVSS_V3" and (.osv.severity[0].score | tonumber) < 4.0) | .id' "$GOVULN_OUTPUT" | wc -l | tr -d ' ')</td>
    </tr>
    <tr>
      <td>nancy</td>
      <td id="nancy-total">$(jq '.vulnerable | length' "$NANCY_OUTPUT")</td>
      <td id="nancy-critical">$(jq '.vulnerable[] | .vulnerabilities[] | select(.cvssScore >= 9.0) | .id' "$NANCY_OUTPUT" | wc -l | tr -d ' ')</td>
      <td id="nancy-high">$(jq '.vulnerable[] | .vulnerabilities[] | select(.cvssScore >= 7.0 and .cvssScore < 9.0) | .id' "$NANCY_OUTPUT" | wc -l | tr -d ' ')</td>
      <td id="nancy-medium">$(jq '.vulnerable[] | .vulnerabilities[] | select(.cvssScore >= 4.0 and .cvssScore < 7.0) | .id' "$NANCY_OUTPUT" | wc -l | tr -d ' ')</td>
      <td id="nancy-low">$(jq '.vulnerable[] | .vulnerabilities[] | select(.cvssScore < 4.0) | .id' "$NANCY_OUTPUT" | wc -l | tr -d ' ')</td>
    </tr>
    <tr>
      <td>OSV Scanner</td>
      <td id="osv-total">$(jq '.results | map(.packages | map(.vulnerabilities) | flatten) | flatten | length' "$OSV_OUTPUT")</td>
      <td id="osv-critical">0</td>
      <td id="osv-high">0</td>
      <td id="osv-medium">0</td>
      <td id="osv-low">0</td>
    </tr>
  </table>
  
  <h2>Detailed Findings</h2>
  
  <h3>govulncheck Findings</h3>
  <div id="govuln-details">
EOF

  # Add govulncheck details
  if [ "$(jq '.vulns | length' "$GOVULN_OUTPUT")" -gt 0 ]; then
    echo "<table><tr><th>Package</th><th>Vulnerability ID</th><th>Severity</th><th>Details</th></tr>" >> "$REPORT_HTML"
    jq -r '.vulns[] | "<tr><td>" + .pkg + "</td><td>" + .id + "</td><td class=\"" + (if .osv.severity != null then (if (.osv.severity[0].score | tonumber) >= 9.0 then "critical" elif (.osv.severity[0].score | tonumber) >= 7.0 then "high" elif (.osv.severity[0].score | tonumber) >= 4.0 then "medium" else "low" end) else "medium" end) + "\">" + (if .osv.severity != null then .osv.severity[0].type + " " + .osv.severity[0].score else "Unknown" end) + "</td><td>" + .details + "<br><a href=\"" + (.osv.references[0].url // "#") + "\" target=\"_blank\">More info</a></td></tr>"' "$GOVULN_OUTPUT" >> "$REPORT_HTML"
    echo "</table>" >> "$REPORT_HTML"
  else
    echo "<p>No vulnerabilities found.</p>" >> "$REPORT_HTML"
  fi

  # Add nancy details
  cat >> "$REPORT_HTML" << EOF
  
  <h3>nancy Findings</h3>
  <div id="nancy-details">
EOF

  if [ "$(jq '.vulnerable | length' "$NANCY_OUTPUT")" -gt 0 ]; then
    echo "<table><tr><th>Dependency</th><th>Vulnerability ID</th><th>Severity</th><th>Title</th></tr>" >> "$REPORT_HTML"
    jq -r '.vulnerable[] | .vulnerabilities[] | "<tr><td>" + (.coordinates // "Unknown") + "</td><td>" + .id + "</td><td class=\"" + (if .cvssScore >= 9.0 then "critical" elif .cvssScore >= 7.0 then "high" elif .cvssScore >= 4.0 then "medium" else "low" end) + "\">" + (.cvssScore | tostring) + "</td><td>" + .title + "</td></tr>"' "$NANCY_OUTPUT" >> "$REPORT_HTML"
    echo "</table>" >> "$REPORT_HTML"
  else
    echo "<p>No vulnerabilities found.</p>" >> "$REPORT_HTML"
  fi

  # Add OSV scanner details
  cat >> "$REPORT_HTML" << EOF
  
  <h3>OSV Scanner Findings</h3>
  <div id="osv-details">
EOF

  if [ "$(jq '.results | map(.packages | map(.vulnerabilities) | flatten) | flatten | length' "$OSV_OUTPUT")" -gt 0 ]; then
    echo "<table><tr><th>Package</th><th>Vulnerability ID</th><th>Severity</th><th>Summary</th></tr>" >> "$REPORT_HTML"
    jq -r '.results[] | .packages[] | select(.vulnerabilities != null) | .vulnerabilities[] | "<tr><td>" + (.package.name // "Unknown") + "</td><td>" + .id + "</td><td class=\"" + (if .severity == "CRITICAL" then "critical" elif .severity == "HIGH" then "high" elif .severity == "MEDIUM" then "medium" else "low" end) + "\">" + (.severity // "Unknown") + "</td><td>" + .summary + "</td></tr>"' "$OSV_OUTPUT" >> "$REPORT_HTML"
    echo "</table>" >> "$REPORT_HTML"
  else
    echo "<p>No vulnerabilities found.</p>" >> "$REPORT_HTML"
  fi

  # Finish HTML report
  cat >> "$REPORT_HTML" << EOF
  
  <h2>Recommendations</h2>
  <div id="recommendations">
    <p>Based on the identified vulnerabilities, the following actions are recommended:</p>
    <ul>
      <li>Update dependencies with critical and high severity vulnerabilities as soon as possible</li>
      <li>Review the impact of medium severity vulnerabilities and plan for updates</li>
      <li>Verify that the reported vulnerabilities affect the code paths used in the project</li>
      <li>Implement regular dependency scanning as part of the CI/CD pipeline</li>
    </ul>
  </div>
  
  <footer>
    <p>Neo N3 Service Layer - Security Report - Generated by vulnerability_scan.sh</p>
  </footer>
</body>
</html>
EOF

  echo "HTML report generated: $REPORT_HTML"
}

# Main execution
main() {
  install_tools
  run_govulncheck
  run_nancy
  run_osv_scanner
  generate_report
  
  echo "Vulnerability scanning completed. All reports saved to $OUTPUT_DIR"
  echo "Summary of findings:"
  echo "--------------------"
  echo "govulncheck: $(jq '.vulns | length' "$GOVULN_OUTPUT") vulnerabilities found"
  echo "nancy: $(jq '.vulnerable | length' "$NANCY_OUTPUT") vulnerable dependencies found"
  echo "OSV Scanner: $(jq '.results | map(.packages | map(.vulnerabilities) | flatten) | flatten | length' "$OSV_OUTPUT") vulnerabilities found"
  echo ""
  echo "For detailed results, please review the HTML report: $OUTPUT_DIR/vulnerability_report_${TIMESTAMP}.html"
}

main 