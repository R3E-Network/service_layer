openapi: 3.0.0
info:
  title: Service Layer Automation API
  description: API documentation for the Automation service endpoints
  version: 1.0.0
  contact:
    name: R3E Network
    email: support@r3e-network.io

servers:
  - url: https://api.service-layer.io/v1
    description: Production server
  - url: https://staging-api.service-layer.io/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    TriggerType:
      type: string
      enum:
        - cron
        - blockchain_event
        - price_event
        - webhook
        - manual
      description: Type of trigger for automation
    
    Automation:
      type: object
      properties:
        id:
          type: string
          description: Unique automation ID
          example: "auto-1234"
        user_id:
          type: integer
          description: User ID that owns this automation
          example: 42
        name:
          type: string
          description: Human-readable name for the automation
          example: "Daily Price Alert"
        description:
          type: string
          description: Description of what the automation does
          example: "Sends a daily alert when BTC price crosses $50k"
        function_id:
          type: string
          description: ID of the function to execute
          example: "func-5678"
        trigger_type:
          $ref: '#/components/schemas/TriggerType'
        trigger_config:
          type: object
          description: Configuration for the trigger
          example: {"schedule": "0 0 * * *"}
        parameters:
          type: object
          description: Parameters to pass to the function when triggered
          example: {"asset": "BTC", "threshold": 50000}
        status:
          type: string
          enum: [active, paused, error]
          description: Current status of the automation
          example: "active"
        created_at:
          type: string
          format: date-time
          description: When the automation was created
          example: "2023-08-15T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          description: When the automation was last updated
          example: "2023-08-15T12:34:56Z"
        last_executed_at:
          type: string
          format: date-time
          description: When the automation was last executed
          example: "2023-08-15T13:00:00Z"
        last_execution_status:
          type: string
          enum: [success, failure, timeout, not_run]
          description: Status of the last execution
          example: "success"
        error_message:
          type: string
          description: Error message if status is 'error'
          example: "Function execution failed: timeout"

    AutomationCreateRequest:
      type: object
      required:
        - name
        - function_id
        - trigger_type
        - trigger_config
      properties:
        name:
          type: string
          description: Human-readable name for the automation
          example: "Daily Price Alert"
        description:
          type: string
          description: Description of what the automation does
          example: "Sends a daily alert when BTC price crosses $50k"
        function_id:
          type: string
          description: ID of the function to execute
          example: "func-5678"
        trigger_type:
          $ref: '#/components/schemas/TriggerType'
        trigger_config:
          type: object
          description: Configuration for the trigger
          example: {"schedule": "0 0 * * *"}
        parameters:
          type: object
          description: Parameters to pass to the function when triggered
          example: {"asset": "BTC", "threshold": 50000}

    AutomationUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name for the automation
          example: "Daily Price Alert"
        description:
          type: string
          description: Description of what the automation does
          example: "Sends a daily alert when BTC price crosses $50k"
        function_id:
          type: string
          description: ID of the function to execute
          example: "func-5678"
        trigger_type:
          $ref: '#/components/schemas/TriggerType'
        trigger_config:
          type: object
          description: Configuration for the trigger
          example: {"schedule": "0 0 * * *"}
        parameters:
          type: object
          description: Parameters to pass to the function when triggered
          example: {"asset": "BTC", "threshold": 50000}
        status:
          type: string
          enum: [active, paused]
          description: Status to set for the automation
          example: "paused"

    AutomationHistory:
      type: object
      properties:
        id:
          type: string
          description: Execution history ID
          example: "exec-9012"
        automation_id:
          type: string
          description: Associated automation ID
          example: "auto-1234"
        trigger_time:
          type: string
          format: date-time
          description: When the trigger was activated
          example: "2023-08-15T13:00:00Z"
        execution_start:
          type: string
          format: date-time
          description: When the function execution started
          example: "2023-08-15T13:00:01Z"
        execution_end:
          type: string
          format: date-time
          description: When the function execution ended
          example: "2023-08-15T13:00:02Z"
        status:
          type: string
          enum: [success, failure, timeout]
          description: Execution status
          example: "success"
        result:
          type: object
          description: Function execution result
          example: {"message": "Price alert triggered"}
        error:
          type: string
          description: Error message if status is 'failure'
          example: "Function execution timed out"
        logs:
          type: string
          description: Function execution logs
          example: "Starting execution...\nChecking price...\nSending alert...\nDone."

paths:
  /automation:
    get:
      summary: List automations
      description: Returns a list of automations for the authenticated user
      operationId: listAutomations
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filter by automation status
          schema:
            type: string
            enum: [active, paused, error]
        - name: trigger_type
          in: query
          description: Filter by trigger type
          schema:
            $ref: '#/components/schemas/TriggerType'
      responses:
        '200':
          description: List of automations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      automations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Automation'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Total number of automations
                            example: 42
                          page:
                            type: integer
                            description: Current page number
                            example: 1
                          limit:
                            type: integer
                            description: Number of items per page
                            example: 20
                          pages:
                            type: integer
                            description: Total number of pages
                            example: 3
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
    
    post:
      summary: Create automation
      description: Creates a new automation
      operationId: createAutomation
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationCreateRequest'
      responses:
        '201':
          description: Automation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Automation'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Function not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'

  /automation/{id}:
    get:
      summary: Get automation details
      description: Returns details for a specific automation
      operationId: getAutomation
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Automation ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Automation details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Automation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Automation not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
    
    put:
      summary: Update automation
      description: Updates an existing automation
      operationId: updateAutomation
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Automation ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationUpdateRequest'
      responses:
        '200':
          description: Automation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Automation'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Automation or function not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
    
    delete:
      summary: Delete automation
      description: Deletes an existing automation
      operationId: deleteAutomation
      tags:
        - Automation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Automation ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Automation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Deleted automation ID
                        example: "auto-1234"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Automation not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'

  /automation/{id}/pause:
    post:
      summary: Pause automation
      description: Pauses an active automation
      operationId: pauseAutomation
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Automation ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Automation paused successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Automation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Automation not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '409':
          description: Automation already paused
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'

  /automation/{id}/resume:
    post:
      summary: Resume automation
      description: Resumes a paused automation
      operationId: resumeAutomation
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Automation ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Automation resumed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Automation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Automation not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '409':
          description: Automation already active
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'

  /automation/{id}/execute:
    post:
      summary: Execute automation manually
      description: Triggers an immediate execution of the automation
      operationId: executeAutomation
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Automation ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  type: object
                  description: Override parameters for this execution
      responses:
        '200':
          description: Automation executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AutomationHistory'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Automation not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '409':
          description: Automation is paused or in error state
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'

  /automation/{id}/history:
    get:
      summary: Get automation execution history
      description: Returns the execution history for a specific automation
      operationId: getAutomationHistory
      tags:
        - Automation
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Automation ID
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filter by execution status
          schema:
            type: string
            enum: [success, failure, timeout]
      responses:
        '200':
          description: Automation execution history
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      history:
                        type: array
                        items:
                          $ref: '#/components/schemas/AutomationHistory'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: Total number of history entries
                            example: 42
                          page:
                            type: integer
                            description: Current page number
                            example: 1
                          limit:
                            type: integer
                            description: Number of items per page
                            example: 20
                          pages:
                            type: integer
                            description: Total number of pages
                            example: 3
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error'
        '404':
          description: Automation not found
          content:
            application/json:
              schema:
                $ref: '../openapi.yaml#/components/schemas/Error' 