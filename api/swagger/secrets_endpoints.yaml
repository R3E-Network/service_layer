openapi: 3.0.0
info:
  title: Service Layer Secrets API
  description: API documentation for the Secret Management service endpoints
  version: 1.0.0
  contact:
    name: R3E Network
    email: support@r3e-network.io

servers:
  - url: https://api.service-layer.io/v1
    description: Production server
  - url: https://staging-api.service-layer.io/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    SecretCreateRequest:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: Secret name
          example: "api_key"
        value:
          type: string
          description: Secret value
          example: "s3cr3t-@p1-k3y-v@lu3"
        description:
          type: string
          description: Secret description
          example: "API key for external service"
        metadata:
          type: object
          description: Additional metadata for the secret
          example: {"service": "external_api", "environment": "production"}
        expiration:
          type: string
          format: date-time
          description: Optional expiration date
          example: "2024-12-31T23:59:59Z"

    SecretUpdateRequest:
      type: object
      properties:
        value:
          type: string
          description: Secret value
        description:
          type: string
          description: Secret description
        metadata:
          type: object
          description: Additional metadata for the secret
        expiration:
          type: string
          format: date-time
          description: Optional expiration date

    Secret:
      type: object
      properties:
        id:
          type: integer
          description: Secret ID
          example: 42
        user_id:
          type: integer
          description: User ID who owns the secret
          example: 15
        name:
          type: string
          description: Secret name
          example: "api_key"
        description:
          type: string
          description: Secret description
          example: "API key for external service"
        metadata:
          type: object
          description: Additional metadata for the secret
          example: {"service": "external_api", "environment": "production"}
        created_at:
          type: string
          format: date-time
          description: Secret creation time
        updated_at:
          type: string
          format: date-time
          description: Secret last update time
        expiration:
          type: string
          format: date-time
          description: Secret expiration time

    SecretWithValue:
      allOf:
        - $ref: '#/components/schemas/Secret'
        - type: object
          properties:
            value:
              type: string
              description: Secret value
              example: "s3cr3t-@p1-k3y-v@lu3"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Operation success status
        error:
          type: string
          description: Error message
          example: "Secret creation failed: Name already exists"
        code:
          type: string
          description: Error code
          example: "SECRET_NAME_CONFLICT"

paths:
  /secrets:
    get:
      summary: List all secrets
      description: Returns a list of all secrets owned by the authenticated user (without secret values)
      operationId: listSecrets
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: Number of records to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Secret'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new secret
      description: Creates a new secret with envelope encryption
      operationId: createSecret
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretCreateRequest'
      responses:
        '201':
          description: Secret created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Secret'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - secret name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /secrets/{id}:
    get:
      summary: Get secret details
      description: Returns details of a specific secret (including its value)
      operationId: getSecret
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/SecretWithValue'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a secret
      description: Updates an existing secret
      operationId: updateSecret
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretUpdateRequest'
      responses:
        '200':
          description: Secret updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Secret'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a secret
      description: Deletes an existing secret
      operationId: deleteSecret
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
      responses:
        '200':
          description: Secret deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Secret deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /secrets/name/{name}:
    get:
      summary: Get secret by name
      description: Returns details of a specific secret by its name (including its value)
      operationId: getSecretByName
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Secret name
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/SecretWithValue'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /secrets/rotate-keys:
    post:
      summary: Rotate encryption keys
      description: Rotates the data encryption keys for all user's secrets
      operationId: rotateEncryptionKeys
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: Keys rotated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Encryption keys rotated successfully for 25 secrets"
                  data:
                    type: object
                    properties:
                      rotated_secrets:
                        type: integer
                        example: 25
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /secrets/audit-log:
    get:
      summary: Get secret access audit log
      description: Returns audit log of secret access (creation, updates, retrievals, deletions)
      operationId: getSecretAuditLog
      tags:
        - Secrets
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: Number of records to skip
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: secret_id
          in: query
          description: Filter by secret ID
          schema:
            type: integer
        - name: secret_name
          in: query
          description: Filter by secret name
          schema:
            type: string
        - name: action
          in: query
          description: Filter by action type
          schema:
            type: string
            enum: [create, read, update, delete, rotate]
        - name: start_time
          in: query
          description: Start time for logs (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: End time for logs (ISO 8601 format)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Audit log entry ID
                        user_id:
                          type: integer
                          description: User ID
                        secret_id:
                          type: integer
                          description: Secret ID
                        secret_name:
                          type: string
                          description: Secret name
                        action:
                          type: string
                          enum: [create, read, update, delete, rotate]
                          description: Action performed
                        timestamp:
                          type: string
                          format: date-time
                          description: When the action was performed
                        source_ip:
                          type: string
                          description: Source IP address
                        user_agent:
                          type: string
                          description: User agent
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'