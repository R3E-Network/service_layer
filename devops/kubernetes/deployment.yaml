apiVersion: v1
kind: Namespace
metadata:
  name: service-layer
---
apiVersion: v1
kind: Secret
metadata:
  name: service-layer-secrets
  namespace: service-layer
type: Opaque
data:
  db-password: cG9zdGdyZXM=  # "postgres" in base64
  jwt-secret: Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24=  # "change-me-in-production" in base64
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-layer-config
  namespace: service-layer
data:
  config.yaml: |
    environment: production
    server:
      port: 8080
      read_timeout: 30
      write_timeout: 30
      idle_timeout: 60
      max_header_bytes: 1048576
    database:
      host: postgresql
      port: 5432
      user: postgres
      name: service_layer
      ssl_mode: disable
      max_open_conns: 25
      max_idle_conns: 25
      conn_max_lifetime: 300
    auth:
      jwt_secret: ${AUTH_JWT_SECRET}
      token_expiry: 3600
      refresh_token_expiry: 86400
    neo:
      urls:
        - http://neo-node:10333
      wallet_path: /app/data/wallet.json
    tee:
      provider: azure
      memory_limit: 128
      timeout_sec: 5
      attestation:
        url: https://attest.azure.net
        policy: policyTEE
    security:
      encryption_key: ${SECURITY_ENCRYPTION_KEY}
      secrets_ttl: 86400
    logging:
      level: info
      format: json
      output: stdout
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-layer
  namespace: service-layer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: service-layer
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: service-layer
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: service-layer
          image: ghcr.io/r3e-network/service_layer:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: CONFIG_FILE
              value: /app/config/config.yaml
            - name: LOG_LEVEL
              value: info
            - name: LOG_FORMAT
              value: json
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: service-layer-secrets
                  key: db-password
            - name: AUTH_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: service-layer-secrets
                  key: jwt-secret
            - name: SECURITY_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: service-layer-secrets
                  key: encryption-key
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: data-volume
              mountPath: /app/data
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "500m"
              memory: "512Mi"
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
      volumes:
        - name: config-volume
          configMap:
            name: service-layer-config
        - name: data-volume
          persistentVolumeClaim:
            claimName: service-layer-data
---
apiVersion: v1
kind: Service
metadata:
  name: service-layer
  namespace: service-layer
spec:
  selector:
    app: service-layer
  ports:
    - port: 80
      targetPort: 8080
      name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service-layer-ingress
  namespace: service-layer
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
spec:
  tls:
    - hosts:
        - api.service-layer.io
      secretName: service-layer-tls
  rules:
    - host: api.service-layer.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service-layer
                port:
                  number: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: service-layer-data
  namespace: service-layer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: service-layer-hpa
  namespace: service-layer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: service-layer
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80